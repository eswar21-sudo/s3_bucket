provider "aws" {
  region = var.aws_region
}

# ðŸ”¹ Create IAM Role for EC2 Instance
resource "aws_iam_role" "ec2_role" {
  name = "EC2S3AccessRole"

  assume_role_policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "Service": "ec2.amazonaws.com"
      },
      "Action": "sts:AssumeRole"
    }
  ]
}
EOF
}

# ðŸ”¹ Attach S3 Read Access Policy to IAM Role
resource "aws_iam_policy" "s3_read_policy" {
  name        = "S3ReadAccessPolicy"
  description = "Allow EC2 to read objects from S3"
  
  policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": "s3:GetObject",
      "Resource": "arn:aws:s3:::${var.s3_bucket_name}/*"
    }
  ]
}
EOF
}

# ðŸ”¹ Attach Policy to IAM Role
resource "aws_iam_role_policy_attachment" "s3_policy_attachment" {
  role       = aws_iam_role.ec2_role.name
  policy_arn = aws_iam_policy.s3_read_policy.arn
}

# ðŸ”¹ Create IAM Instance Profile
resource "aws_iam_instance_profile" "ec2_profile" {
  name = "EC2InstanceProfile"
  role = aws_iam_role.ec2_role.name
}

# ðŸ”¹ Create EC2 Instance with User Data
resource "aws_instance" "web" {
  ami           = var.ami_id
  instance_type = var.instance_type
  key_name      = var.key_name
  subnet_id     = var.subnet_id
  vpc_security_group_ids = [var.security_group_id]
  iam_instance_profile   = aws_iam_instance_profile.ec2_profile.name

  user_data = <<-EOF
              #!/bin/bash
              yum update -y
              echo "Downloading script from S3..."
              aws s3 cp s3://${var.s3_bucket_name}/${var.s3_script_key} /tmp/userdata.sh
              chmod +x /tmp/userdata.sh
              /tmp/userdata.sh
              EOF

  tags = {
    Name = var.instance_name
  }
}
